<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.orderingsystem.order.mapper.OrderMapper">

    <resultMap id="orderList" type="com.example.orderingsystem.order.po.Order">
        <id column="id" property="id"/>
        <result column="uid" property="uid"/>
        <result column="name" property="name"/>
        <result column="mid" property="mid"/>
        <result column="ctime" property="ctime"/>
        <result column="number" property="number"/>
        <result column="sid" property="sid"/>

        <association property="user"
                     select="com.example.orderingsystem.user.mapper.UserMapper.getUserById"
                     column="{uid = uid}">
        </association>

        <association property="price"
                     select="com.example.orderingsystem.recipe.mapper.MenuItemMapper.getPrice"
                     column="{name = name,mid = mid}">
        </association>
    </resultMap>

    <resultMap id="orderListByGroup" type="com.example.orderingsystem.order.po.Order">

        <result column="name" property="name"/>
        <result column="mid" property="mid"/>
        <result column="number" property="number"/>

        <association property="price"
                     select="com.example.orderingsystem.recipe.mapper.MenuItemMapper.getPrice"
                     column="{name = name,mid = mid}">
        </association>
    </resultMap>

    <insert id="addOrderList">
        insert into `order`(id,uid,name,mid,ctime,number,sid) values
            <foreach collection="orderList" item="order" separator="," >
                (null,
                 #{order.uid},
                 #{order.name},
                 #{order.mid},
                 #{order.ctime},
                 #{order.number},
                 -1)
            </foreach>
    </insert>
    <update id="updateOrders">
        update `order` set sid = #{sid}
        where uid = #{order.uid} and `name` = #{order.name} and mid = #{order.mid}
    </update>
    <select id="getOrders" resultMap="orderList">
        select * from `order`
        <where>
            <if test="page.uid != null">
                uid = #{page.uid}
            </if>
            <if test="page.startTime != null">
                and <![CDATA[ctime >= #{page.startTime}]]>
            </if>
            <if test="page.endTime != null">
                and <![CDATA[ctime <= #{page.endTime}]]>
            </if>
        </where>
        limit #{page.start},#{page.limit}
    </select>
    <select id="getOrdersAndGroup" resultMap="orderListByGroup">
        select `name`,mid, SUM(number) as number from `order`
        <where>
            <if test="page.uid != null">
                uid = #{page.uid}
            </if>
            <if test="page.uid != null and page.startTime != null">
                and
            </if>
            <if test="page.startTime != null">
                <![CDATA[ctime >= #{page.startTime}]]>
            </if>
            <if test="page.endTime != null">
                and <![CDATA[ctime <= #{page.endTime}]]>
            </if>
        </where>
        group by `name`
        limit #{page.start},#{page.limit}
    </select>
    <select id="countOrder" resultType="java.lang.Integer">
        select COUNT(*) from `order`
        <where>
            <if test="page.uid != null">
                uid = #{page.uid}
            </if>
            <if test="page.startTime != null">
                and <![CDATA[ctime >= #{page.startTime}]]>
            </if>
            <if test="page.endTime != null">
                and <![CDATA[ctime <= #{page.endTime}]]>
            </if>
        </where>
    </select>
    <select id="countOrderByGroup" resultType="java.lang.Integer">
        select COUNT(*) from (
            select `name` from `order`
            <where>
                <if test="page.uid != null">
                    uid = #{page.uid}
                </if>
                <if test="page.uid != null and page.startTime != null">
                    and
                </if>
                <if test="page.startTime != null">
                    <![CDATA[ctime >= #{page.startTime}]]>
                </if>
                <if test="page.endTime != null">
                    and <![CDATA[ctime <= #{page.endTime}]]>
                </if>
            </where>
            group by `name`
        ) as groupTable
    </select>
</mapper>
